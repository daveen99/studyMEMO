[ git ]

git != github
like java != javascript


git add .
(폴더 안의 오브젝트 전부 추가)

git commit --amend
(커밋 수정)



commit ignore 

#비밀일기.txt
#*.jpg    (모든 jpg ignore)
#!d*.jpg (d로 시작하는 jpg는 commit할것)
#!dog.jpg   (예외 dog.jpg)

#사과/      (사과폴더와 내부의 것들을 전부 ignore)

#doc/*.txt  (doc 폴더안의 모든 txt파일을 ignore)

#이미 commit된 파일에는 영향이 미치지 않는다.
#커밋하기전에 해야함

-----
git Branch
브랜치(Branch)
브랜치는 특정버전을 가리키는 포인터같은것

-----
Merge (병합)
브랜치를 합치는 기능

-----
git Confilct (충돌)
여러사람이 동시에 같은 파일의 같은 부분을 변경했을 때 이 문제가 발생

-----
git Diff
차이점을 비교하여 시작적으로 표시해주는 역할을 하는 명령어

a) 이전 커밋      b) 현재 커밋


branch간의 차이점
git diff master...location
두 브랜치의 최신 커밋을 비교함

commit간의 차이점
git diff 4a6c347...fb85540
커밋해시를 비교 (git log로 확인가능)

-----
git Stash (git에서 제공하는 일시적인 작업 저장소)

git stash    (임시보관)
git stash list (리스트)
git stash pop   (임시보관한거 꺼내기)
apply (임시보관한거 적용하기 (꺼내지않음))
-----

git checkout (커밋해쉬)

git checkout HEAD~1    ~2    ~3  ...
헤드기준 커밋 뒤로가기

git switch -
직전의 브랜치로 돌아가기

git switch -c bububu 492f6f8 
해당 커밋기준으로 새 브랜치를 만들어라

git switch -c bububu HEAD~2
헤드기준 뒤로 두번째의 커밋에서 새로운 브랜치를 만들어라

git restore --source HEAD~2 hello.txt
git restore --source HEAD hello.txt
HEAD 위치를 기준으로 hello.txt의 내용을 변경

git restore --staged bye.txt
add되었던 bye.txt를 내린다 (add 취소)

git reset <commit-hash>   //   특정 commit으로 이동 후
그 이후의 commit들을 날려버리는 명령어
(완전히 사라지진 않음 , 복구 가능하긴함)


git revert <지우고싶은 커밋>   (협업할때 사용함)
커밋은 그대로있고 이 커밋을 지운다는 커밋을 추가하는방법입니다.
====


GitHub
-----
원격저장소  추가
git remote add [별칭] [URL]
예시) git remote add origin [URL]

원격저장소  삭제
git remote remove [별칭]

원격저장소 별칭 변경
git remote rename [기존별칭] [신규별칭]

원격저장소 목록 확인
git remote -v

원격저장소 업로드
git push [별칭] [branch]

원격저장소 업로드 && 주소 계속 추적
git push - u [별칭] [branch]
다음 업로드는
git push만 써도 업로드됩니다.

---
원격 저장소의 내용을 복사하여 새로운 로컬 저장소를 만듭니다.
git clone [URL]


=======
git branch -r    // 원격브런치 호출
git branch -a   //  로컬. 원격브런치 호출
=======

git fetch    //원격저장소의 변경사항을 로컬저장소로 임시로 옮겨오는 명령어
git fetch [remote-name] (별칭)
완전히 불러오는것은 아니고 commit만 잠시 옮겨온다

git pull [remote-name] [branch]
원격저장소의 변경사항을 로컬저장소로 완전히 옮겨온다
#git pull = git fetch + git merge

뭐든지 작업을 완료 해놓고 움직여야한다.
commit OR stash

git pull과 충돌(Conflict)

#Push 하기 전에 Fetch 또는 Pull 하기
충돌 방지: git fetch나 git pull을 통해 로컬 저장소가 원격 저장소의 최신 상태를
 반영하면, 동일한 파일을 동시에 변경하는 등의 상황에서 충돌이 발생할 가능성을
 크게 줄일 수 있습니다.


pullrequest
깃허브에서 사용하는